<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<template name="createCampaign" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="type" description="The campaign type."/>
    <parameter name="listId" description="The unique id for the list."/>
    <parameter name="savedSegmentId" description="The id for an existing saved segment."/>
    <parameter name="match" description="The segment match type."/>
    <parameter name="conditions" description="The condition for segment."/>
    <parameter name="subjectLine" description="The subject line for the campaign."/>
    <parameter name="fromName" description="The 'from' name on the campaign (not an email address)."/>
    <parameter name="replyTo" description="The reply-to email address for the campaign."/>
    <parameter name="campaignTitle" description="The title of the campaign."/>
    <parameter name="useConversation"
               description="Boolean type, use MailChimp Conversation feature to manage out-of-office replies."/>
    <parameter name="toName" description="The campaign's custom 'To' name."/>
    <parameter name="folderId" description="The id for that folder."/>
    <parameter name="authenticate"
               description="Boolean type, whether MailChimp authenticated the campaign. Defaults to true."/>
    <parameter name="autoFooter" description="Boolean type, MailChimpâ€™s default footer to the campaign."/>
    <parameter name="inlineCss" description="Boolean type, CSS included with the campaign content."/>
    <parameter name="autoTweet"
               description="Boolean type, tweet a link to the campaign archive page when the campaign is sent."/>
    <parameter name="autoFbPost" description="An array of Facebook page ids to auto-post."/>
    <parameter name="fbComments"
               description="Boolean type, allows Facebook comments on the campaign. Defaults to true."/>
    <parameter name="winnerCriteria" description="The value of winner_criteria."/>
    <parameter name="waitTime" description="The number of minutes to wait before choosing the winning campaign."/>
    <parameter name="testSize"
               description="The percentage of recipients to send the test combinations to, must be a value between 10
               and 100."/>
    <parameter name="subjectLinesForVariateSettings"
               description="The possible subject lines to test. If no subject lines are provided, settings.subject_line
               will be used."/>
    <parameter name="sendTimes"
               description="The possible send times to test. The times provided should be in the format
               YYYY-MM-DD HH:MM:SS"/>
    <parameter name="fromNames" description="The possible from names."/>
    <parameter name="replyToAddresses" description="The possible reply-to addresses."/>
    <parameter name="opens" description="Boolean type, whether to track opens. Defaults to true."/>
    <parameter name="htmlClicks"
               description="Boolean type, whether to track clicks in the HTML version of the campaign.
               Defaults to true. "/>
    <parameter name="textClicks"
               description="Boolean type, whether to track clicks in the plain-text version of the campaign.
               Defaults to true. "/>
    <parameter name="goalTracking" description="Boolean type, whether to enable Goal tracking."/>
    <parameter name="ecomm360" description="Boolean type, whether to enable eCommerce360 tracking."/>
    <parameter name="googleAnalytics" description="The custom slug for Google Analytics tracking (max of 50 bytes)."/>
    <parameter name="clickTale" description="The custom slug for ClickTale tracking (max of 50 bytes)."/>
    <parameter name="salesforce" description="Salesforce tracking options for a campaign."/>
    <parameter name="highRise" description="Highrise tracking options for a campaign."/>
    <parameter name="capsule" description="Capsule tracking options for a campaign."/>
    <parameter name="feedUrl" description="The URL for the RSS feed."/>
    <parameter name="frequency" description="The frequency of the RSS Campaign."/>
    <parameter name="schedule" description="The schedule for sending the RSS Campaign."/>
    <parameter name="constrainRssImg"
               description="Boolean type, whether to add CSS to images in the RSS feed to constrain their width in
               campaigns."/>
    <parameter name="imageUrl" description="The url for the header image for the card."/>
    <parameter name="description" description="A short summary of the campaign to display."/>
    <parameter name="title" description="The title for the card."/>
    <sequence>
        <property name="type" expression="$func:type"/>
        <property name="listId" expression="$func:listId"/>
        <property name="savedSegmentId" expression="$func:savedSegmentId"/>
        <property name="match" expression="$func:match"/>
        <property name="conditions" expression="$func:conditions"/>
        <property name="subjectLine" expression="$func:subjectLine"/>
        <property name="fromName" expression="$func:fromName"/>
        <property name="replyTo" expression="$func:replyTo"/>
        <property name="useConversation" expression="$func:useConversation"/>
        <property name="toName" expression="$func:toName"/>
        <property name="folderId" expression="$func:folderId"/>
        <property name="authenticate" expression="$func:authenticate"/>
        <property name="autoFooter" expression="$func:autoFooter"/>
        <property name="inlineCss" expression="$func:inlineCss"/>
        <property name="autoTweet" expression="$func:autoTweet"/>
        <property name="autoFbPost" expression="$func:autoFbPost"/>
        <property name="fbComments" expression="$func:fbComments"/>
        <property name="winnerCriteria" expression="$func:winnerCriteria"/>
        <property name="waitTime" expression="$func:waitTime"/>
        <property name="testSize" expression="$func:testSize"/>
        <property name="subjectLinesForVariateSettings" expression="$func:subjectLinesForVariateSettings"/>
        <property name="sendTimes" expression="$func:sendTimes"/>
        <property name="fromNames" expression="$func:fromNames"/>
        <property name="replyToAddresses" expression="$func:replyToAddresses"/>
        <property name="opens" expression="$func:opens"/>
        <property name="htmlClicks" expression="$func:htmlClicks"/>
        <property name="textClicks" expression="$func:textClicks"/>
        <property name="goalTracking" expression="$func:goalTracking"/>
        <property name="ecomm360" expression="$func:ecomm360"/>
        <property name="googleAnalytics" expression="$func:googleAnalytics"/>
        <property name="clickTale" expression="$func:clickTale"/>
        <property name="salesforce" expression="$func:salesforce"/>
        <property name="highRise" expression="$func:highRise"/>
        <property name="capsule" expression="$func:capsule"/>
        <property name="feedUrl" expression="$func:feedUrl"/>
        <property name="frequency" expression="$func:frequency"/>
        <property name="schedule" expression="$func:schedule"/>
        <property name="constrainRssImg" expression="$func:constrainRssImg"/>
        <property name="imageUrl" expression="$func:imageUrl"/>
        <property name="description" expression="$func:description"/>
        <property name="title" expression="$func:title"/>
        <property name="campaignTitle" expression="$func:campaignTitle"/>
        <script language="js">
            <![CDATA[
                var listId = mc.getProperty('listId');
                var type = mc.getProperty('type');
                var segmentOpts = mc.getProperty('segmentOpts');
                var type = mc.getProperty('type');
                var fromName = mc.getProperty('fromName');
                var subjectLine = mc.getProperty('subjectLine');
                var replyTo = mc.getProperty('replyTo');
                var campaignTitle = mc.getProperty('campaignTitle');
                var useConversation = mc.getProperty('useConversation');
                var toName = mc.getProperty('toName');
                var folderId = mc.getProperty('folderId');
                var authenticate = mc.getProperty('authenticate');
                var autoFooter = mc.getProperty('autoFooter');
                var inlineCss = mc.getProperty('inlineCss');
                var autoTweet = mc.getProperty('autoTweet');
                var autoFbPost = mc.getProperty('autoFbPost');
                var fbComments = mc.getProperty('fbComments');
                var winnerCriteria = mc.getProperty('winnerCriteria');
                var waitTime = mc.getProperty('waitTime');
                var testSize = mc.getProperty('testSize');
                var subjectLinesForVariateSettings = mc.getProperty('subjectLinesForVariateSettings');
                var sendTimes = mc.getProperty('sendTimes');
                var fromNames = mc.getProperty('fromNames');
                var replyToAddresses = mc.getProperty('replyToAddresses');
                var opens = mc.getProperty('opens');
                var htmlClicks = mc.getProperty('htmlClicks');
                var textClicks = mc.getProperty('textClicks');
                var goalTracking = mc.getProperty('goalTracking');
                var ecomm360 = mc.getProperty('ecomm360');
                var googleAnalytics = mc.getProperty('googleAnalytics');
                var clickTale = mc.getProperty('clickTale');
                var salesforce = mc.getProperty('salesforce');
                var highRise = mc.getProperty('highRise');
                var capsule = mc.getProperty('capsule');
                var imageUrl = mc.getProperty('imageUrl');
                var description = mc.getProperty('description');
                var title = mc.getProperty('title');
                var feedUrl = mc.getProperty('feedUrl');
                var frequency = mc.getProperty('frequency');
                var schedule = mc.getProperty('schedule');
                var constrainRssImg = mc.getProperty('constrainRssImg');
                var savedSegmentId = mc.getProperty('savedSegmentId');
                var match = mc.getProperty('match');
                var conditions = mc.getProperty('conditions');
                var query = '{';

                query = query.concat('"recipients":{' + '"list_id":"' + listId +'",');
                var segmentOptsParameter = '';

                if (savedSegmentId != null && savedSegmentId != "" ){
                    segmentOptsParameter = segmentOptsParameter.concat('"saved_segment_id":' + savedSegmentId + ',');
                }
                if (match != null && match != "" ){
                    segmentOptsParameter = segmentOptsParameter.concat('"match":"' + match + '",');
                }
                if (conditions != null && conditions != "" && conditions != "[]"){
                    var conditions = eval( "('" + conditions + "')" );
                    segmentOptsParameter = segmentOptsParameter.concat('"conditions":' + conditions + ',');
                }
                if(segmentOptsParameter != null && segmentOptsParameter != ""){
                   segmentOptsParameter = segmentOptsParameter.substring(0, segmentOptsParameter.length-1);
                   query = query.concat('"segment_opts":{');
                   query = query.concat(segmentOptsParameter);
                   query = query.concat('}');
                }else{
                   query = query.substring(0, query.length-1);
                }
                query = query.concat('},');
                query = query.concat('"type":"' + type +'",');
                query = query.concat('"settings":{' + '"subject_line":"' + subjectLine + '"');
                query = query.concat(',"from_name":"' + fromName + '"');
                query = query.concat(',"reply_to":"' + replyTo + '"');
                if (campaignTitle != null && campaignTitle != ""){
                    query = query.concat(',"title":"' + campaignTitle +'"');
                }
                if (useConversation != null && useConversation != ""){
                    query = query.concat(',"use_conversation":' + useConversation);
                }
                if (toName != null && toName != ""){
                    query = query.concat(',"to_name":"' + toName + '"');
                }
                if (folderId != null && folderId != ""){
                    query = query.concat(',"folder_id":"' + folderId + '"');
                }
                if (authenticate != null && authenticate != ""){
                    query = query.concat(',"authenticate":' + authenticate);
                }
                if (autoFooter != null && autoFooter != ""){
                    query = query.concat(',"auto_footer":' + autoFooter);
                }
                if (inlineCss != null && inlineCss != ""){
                    query = query.concat(',"inline_css":' + inlineCss);
                }
                if (autoTweet != null && autoTweet != ""){
                    query = query.concat(',"auto_tweet":' + autoTweet);
                }
                if (fbComments != null && fbComments != ""){
                    query = query.concat(',"fb_comments":' + fbComments);
                }
                if (autoFbPost != null && autoFbPost != "" && autoFbPost != "[]"){
                    var autoFbPost = eval( "('" + autoFbPost + "')" );
                    query = query.concat(',"auto_fb_post":' + autoFbPost);
                }
                query = query.concat('},');
                if (winnerCriteria != null && winnerCriteria != ""){
                    query = query.concat('"variate_settings":{' + '"winner_criteria":"' + winnerCriteria +'"');
                    if (waitTime != null && waitTime != ""){
                        query = query.concat(',"wait_time":' + waitTime);
                    }
                    if (testSize != null && testSize != ""){
                        query = query.concat(',"test_size":' + testSize);
                    }
                    if (subjectLinesForVariateSettings != null && subjectLinesForVariateSettings != "" && subjectLinesForVariateSettings != "[]"){
                        var subjectLinesForVariateSettings = eval( "('" + subjectLinesForVariateSettings + "')" );
                        query = query.concat(',"subject_lines":' + subjectLinesForVariateSettings);
                    }
                    if (sendTimes != null && sendTimes != "" && sendTimes != "[]"){
                        var sendTimes = eval( "('" + sendTimes + "')" );
                        query = query.concat(',"send_times":' + sendTimes);
                    }
                    if (fromNames != null && fromNames != "" && fromNames != "[]"){
                        var fromNames = eval( "('" + fromNames + "')" );
                        query = query.concat(',"from_names":' + fromNames);
                    }
                    if (replyToAddresses != null && replyToAddresses != "" && replyToAddresses != "[]"){
                        var replyToAddresses = eval( "('" + replyToAddresses + "')" );
                        query = query.concat(',"reply_to_addresses":' + replyToAddresses);
                    }
                    query = query.concat('},');
                }
                var trackingParameter = '';
                if (opens != null && opens != ""){
                    trackingParameter = trackingParameter.concat('"opens":' + opens + ',');
                }
                if (htmlClicks != null && htmlClicks != ""){
                    trackingParameter = trackingParameter.concat('"html_clicks":' + htmlClicks + ',');
                }
                if (textClicks != null && textClicks != ""){
                    trackingParameter = trackingParameter.concat('"text_clicks":' + textClicks + ',');
                }
                if (goalTracking != null && goalTracking != ""){
                    trackingParameter = trackingParameter.concat('"goal_tracking":' + goalTracking + ',');
                }
                if (ecomm360 != null && ecomm360 != ""){
                    trackingParameter = trackingParameter.concat('"ecomm360":' + ecomm360 + ',');
                }
                if (googleAnalytics != null && googleAnalytics != ""){
                    trackingParameter = trackingParameter.concat('"google_analytics":"' + googleAnalytics + '",');
                }
                if (clickTale != null && clickTale != ""){
                    trackingParameter = trackingParameter.concat('"clicktale":"' + clickTale + '",');
                }
                if (salesforce != null && salesforce != "" && salesforce != "{}"){
                    var salesforce = eval( "('" + salesforce + "')" );
                    trackingParameter = trackingParameter.concat('"salesforce":' + salesforce + ',');
                }
                if (highRise != null && highRise != "" && highRise != "{}"){
                    var highRise = eval( "('" + highRise + "')" );
                    trackingParameter = trackingParameter.concat('"highrise":' + highRise + ',');
                }
                if (capsule != null && capsule != "" && capsule != "{}"){
                    var capsule = eval( "('" + capsule + "')" );
                    trackingParameter = trackingParameter.concat('"capsule":' + capsule + ',');
                }
                if(trackingParameter != null && trackingParameter != ""){
                   trackingParameter = trackingParameter.substring(0, trackingParameter.length-1);
                   query = query.concat('"tracking":{');
                   query = query.concat(trackingParameter);
                   query = query.concat('},');
                }
                var socialCardParameter = '';
                if (imageUrl != null && imageUrl != ""){
                    socialCardParameter = socialCardParameter.concat('"image_url":"' + imageUrl + '",');
                }
                if (description != null && description != ""){
                    socialCardParameter = socialCardParameter.concat('"description":"' + description + '",');
                }
                if (title != null && title != ""){
                    socialCardParameter = socialCardParameter.concat('"title":"' + title + '",');
                }
                if(socialCardParameter != null && socialCardParameter != ""){
                   socialCardParameter = socialCardParameter.substring(0, socialCardParameter.length-1);
                   query = query.concat('"social_card":{');
                   query = query.concat(socialCardParameter);
                   query = query.concat('},');
                }
                var rssOptsParameter = '';
                if (feedUrl != null && feedUrl != ""){
                    rssOptsParameter = rssOptsParameter.concat('"feed_url":"' + feedUrl + '",');
                }
                if (frequency != null && frequency != ""){
                    rssOptsParameter = rssOptsParameter.concat('"frequency":"' + frequency + '",');
                }
                if (schedule != null && schedule != "" && schedule != "[]"){
                    var schedule = eval( "('" + schedule + "')" );
                    rssOptsParameter = rssOptsParameter.concat('"schedule":' + schedule);
                }
                 if (constrainRssImg != null && constrainRssImg != ""){
                    rssOptsParameter = rssOptsParameter.concat('"constrain_rss_img":' + constrainRssImg);
                }
                if(rssOptsParameter != null && rssOptsParameter != ""){
                   rssOptsParameter = rssOptsParameter.substring(0, rssOptsParameter.length-1);
                   query = query.concat('"rss_opts":{');
                   query = query.concat(rssOptsParameter);
                   query = query.concat('},');
                }
                query = query.substring(0, query.length-1);
                mc.setProperty('query', query);
        ]]>
        </script>
        <payloadFactory media-type="json">
            <format>
                $1
                }
            </format>
            <args>
                <arg expression="$ctx:query"/>
            </args>
        </payloadFactory>
        <property name="messageType" value="application/json" scope="axis2"/>
        <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>
        <property name="Accept-Encoding" scope="transport" action="remove"/>
        <filter source="$ctx:mailchimpBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="POST" uri-template="{uri.var.apiUrl}/{uri.var.apiVersion}/campaigns"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="POST" uri-template="{uri.var.apiUrl}/{uri.var.apiVersion}/campaigns"/>
                    </endpoint>
                </call>
            </else>
        </filter>
    </sequence>
</template>